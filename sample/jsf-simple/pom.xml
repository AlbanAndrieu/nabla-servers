<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.nabla.project.servers.sample</groupId>
		<artifactId>sample</artifactId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	<!--<groupId>com.nabla.project.servers.sample</groupId> -->
	<artifactId>jsf-simple</artifactId>
	<packaging>war</packaging>
	<!--<version>1.0</version> -->
	<name>Java Server Faces Maven Webapp</name>

	<properties>
		<!--
		<jsf.api.version>2.1</jsf.api.version>
        	<jsf.impl.version>2.1</jsf.impl.version>
		<jsf.api.version>1.2_15</jsf.api.version>
       		<jsf.impl.version>1.2_15</jsf.impl.version>
		<sun.jsf.api.version>2.1.7</sun.jsf.api.version>
		<sun.jsf.impl.version>2.1.7</sun.jsf.impl.version>
		<el.api.version>2.2.1-b04</el.api.version>
		<jboss.el.version>1.0_02.CR6</jboss.el.version>
		-->
		<!--<cargo.jetty.jmx.activation>-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=10088 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false</cargo.jetty.jmx.activation>-->
		<cargo.jetty.jmx.activation></cargo.jetty.jmx.activation>
		<cargo.jmx.activation></cargo.jmx.activation>
		<guava.version>23.5-jre</guava.version>
		<jetty9.version>9.3.3.v20150827</jetty9.version>
		<!-- for jmeter -->
		<performancetest.webservice.path>/welcome</performancetest.webservice.path>
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- Arquillian : http://arquillian.org/guides/getting_started_fr -->

			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
				of artifacts. We use this here so that we always get the correct versions
				of artifacts. Here we use the jboss-javaee-6.0-with tools stack (you can
				read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
				for your project, such as Arquillian for testing) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${org.jboss.bom.jboss.javaee6.with.tools.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- http://repo1.maven.org/maven -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp.api.version}</version>
		</dependency>

		<!-- Tomcat 6 need this -->
		<dependency>
			<groupId>com.sun.el</groupId>
			<artifactId>el-ri</artifactId>
			<version>${el.ri.version}</version>
		</dependency>

		<!-- TODO must be needed later
		<dependency>
			<groupId>org.jboss.el</groupId>
			<artifactId>jboss-el</artifactId>
			<version>${jboss.el.version}</version>
			<scope>${scope.type}</scope>
		</dependency>

		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>el-api</artifactId>
			<version>${el.api.version}</version>
			<scope>${scope.type}</scope>
		</dependency>

		<dependency>
			<groupId>org.mvel</groupId>
			<artifactId>mvel2</artifactId>
			<version>${org.mvel.mvel2.version}</version>
			<scope>${scope.type}</scope>
		</dependency>
		-->
		<!--
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <scope>compile</scope>
        </dependency>
        -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpclient.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<exclusions>
				<!-- circular dependency -->
				<exclusion>
					<artifactId>logback-classic</artifactId>
					<groupId>ch.qos.logback</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- First declare the APIs we depend on and need for compilation. All
			of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<!--
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<!-- Import the JPA API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<!--
		<dependency>
			<groupId>org.jboss.spec.javax.transaction</groupId>
			<artifactId>jboss-transaction-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<!-- Import the Common Annotations API (JSR-250), we use provided scope
			as the API is included in JBoss AS 7 -->
		<!--
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<!-- Import the JAX-RS API, we use provided scope as the API is included
			in JBoss AS 7 -->
		<!--
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<!-- Import the JPA API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<!--
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<!-- Import the EJB API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<!--
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<!-- Import the Bean Validation API, which is used both on the server and
			the client. -->
		<!--
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>
		-->

		<!-- Import the JSF API, we use provided scope as the API is included
        	    in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!--
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <scope>${scope.tomcat.never.type}</scope>
        </dependency>-->

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet.api.version}</version>
			<scope>provided</scope>
			<!-- javax.servlet-api-3.0.1.jar Offending class javax/servlet/Servlet.class  in Tomcat -->
		</dependency>

		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<scope>test</scope>
		</dependency>

		<!--
        	<dependency>
        	    <groupId>com.saucelabs</groupId>
        	    <artifactId>sauce_junit</artifactId>
        	    <scope>test</scope>
        	</dependency>

        	<dependency>
        	    <groupId>com.saucelabs.selenium</groupId>
        	    <artifactId>sauce-ondemand-driver</artifactId>
        	    <scope>test</scope>
        	</dependency>
        	<dependency>
        	    <groupId>com.saucelabs.selenium</groupId>
        	    <artifactId>selenium-client-factory</artifactId>
        	    <scope>test</scope>
        	</dependency>
        	-->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<type>jar</type>
			<scope>test</scope>
		</dependency>

		<!--
		<dependency>
			<groupId>org.seleniumhq.selenium.client-drivers</groupId>
			<artifactId>selenium-java-client-driver</artifactId>
			<version>${selenium.java.client.driver.version}</version>
			<scope>test</scope>
		</dependency>
		 -->

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-remote-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-firefox-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-support</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-safari-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-iphone-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-ie-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-htmlunit-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-android-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-chrome-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- for cannot access javax.faces.application.FacesMessage -->
		<!-- see in core project it is provided (needed for jboss 7) -->
		<dependency>
			<groupId>javax.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>${jsf.api.version}</version>
			<scope>${scope.tomcat.never.type}</scope>
			<!-- <scope>compile</scope> compile needed for jetty -->
		</dependency>

		<!-- TODO remove not needed
                <dependency>
                        <groupId>javax.faces</groupId>
                        <artifactId>jsf-impl</artifactId>
                        <version>${jsf.impl.version}</version>
                        <scope>${scope.type}</scope>
                </dependency>
		-->

		<!-- TODO remove
    		<dependency>
        		<groupId>org.primefaces</groupId>
        		<artifactId>primefaces</artifactId>
        		<version>4.0</version>
    		</dependency>
		 -->

		<!-- Javaee API -->
		<!-- TODO remove
		<dependency>
    			<groupId>javax</groupId>
    			<artifactId>javaee-api</artifactId>
    			<version>${javax.javaee.api.version}</version>
			<scope>${scope.type}</scope>
		</dependency>
		 recommended way is to include
  		<dependency>
            		<groupId>javax.faces</groupId>
            		<artifactId>javax.faces-api</artifactId>
            		<version>2.1</version>
	    		<scope>${scope.type}</scope>
  		</dependency>
		-->
		<!-- http://download.java.net/maven/2 needed for tomcat only -->
		<!-- http://www.mkyong.com/jsf2/jsf-2-0-hello-world-example/ -->
		<!-- replaced by javax.faces for other except tomcat -->
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>${sun.jsf.version}</version>
			<scope>${scope.tomcat.only.type}</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<version>${sun.jsf.version}</version>
			<scope>${scope.tomcat.only.type}</scope>
		</dependency>

	</dependencies>

	<build>
		<finalName>welcome</finalName>
		<plugins>
			<!-- for automatic running of integration tests with Jetty -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>${maven.cargo.maven2.plugin.version}</version>
				<executions>
					<execution>
						<id>start-container-overrided</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<timeout>240000</timeout>
							<!--
							<configuration>
								<properties>
									<cargo.jvmargs>${jacoco.agent.it.arg}</cargo.jvmargs>
								</properties>
							</configuration>
							-->
						</configuration>
					</execution>
					<execution>
						<id>stop-container-overrided</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
						<configuration>
							<timeout>60000</timeout>
							<configuration>
								<properties>
									<cargo.jmx.activation></cargo.jmx.activation>
									<cargo.start.jvmargs></cargo.start.jvmargs>
									<cargo.jvmargs></cargo.jvmargs>
								</properties>
							</configuration>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<wait>${cargo.wait}</wait>
					<container>
						<timeout>300000</timeout>
						<!-- 5 minutes -->
						<!--<containerId>${cargo.container}</containerId> -->
						<!--<type>${cargo.container.type}</type> -->
						<dependencies>
							<dependency>
								<groupId>org.slf4j</groupId>
								<artifactId>slf4j-api</artifactId>
							</dependency>
							<dependency>
								<groupId>org.slf4j</groupId>
								<artifactId>slf4j-log4j12</artifactId>
							</dependency>
							<dependency>
								<groupId>log4j</groupId>
								<artifactId>log4j</artifactId>
							</dependency>
						</dependencies>
					</container>
					<configuration>
						<!--<type>${cargo.configuration.type}</type>-->
						<!--<home>${project.build.directory}/cargo/installs/jboss-as-dist-7.1.1.Final/jboss-as-7.1.1.Final/standalone/</home>-->
						<properties>
							<cargo.hostname>${cargo.host}</cargo.hostname>
							<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
							<cargo.tomcat.manager.url>${deploy.url}</cargo.tomcat.manager.url>
							<cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
							<cargo.remote.password>${cargo.remote.password}</cargo.remote.password>
							<cargo.logging>high</cargo.logging>
							<cargo.start.jvmargs><![CDATA[${jacoco.agent} ${cargo.jmx.activation}]]></cargo.start.jvmargs>
							<!-- <cargo.jvmargs> -Dnabla.config=${basedir}/src/main/resources
								-Dnabla.data=${basedir}/src/test/resources/data -->
							<!-- -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -->
							<!-- </cargo.jvmargs> -->
						</properties>
						<configfiles>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/etc</file>
								<todir>etc</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/start.d</file>
								<todir>start.d</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/webapps</file>
								<todir>webapps</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/start.ini</file>
								<todir></todir>
							</configfile>
						</configfiles>
						<!-- https://codehaus-cargo.github.io/cargo/Maven2+Plugin+Reference+Guide.html#Maven2PluginReferenceGuide-file -->
						<files>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/keystore</file>
								<todir>etc</todir>
								<configfile>false</configfile>
								<overwrite>true</overwrite>
							</configfile>
						</files>
					</configuration>
					<deployables>
						<deployable>
							<groupId>com.nabla.project.servers.sample</groupId>
							<artifactId>jsf-simple</artifactId>
							<type>war</type>
							<properties>
								<context>/welcome</context>
							</properties>
							<pingURL>http://${cargo.host}:${cargo.port}/welcome</pingURL>
							<pingTimeout>60000</pingTimeout>
						</deployable>
					</deployables>
				</configuration>
			</plugin>
			<!--
			<plugin>
				<groupId>com.sinapsi.memtracker</groupId>
				<artifactId>mem-tracker-maven-plugin</artifactId>
				<version>${maven.mem.tracker.maven.plugin.version}</version>
				<configuration>
					<host>localhost</host>
					<port>${cargo.monitoring.jmx.rmi.port}</port>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>track</goal>
						</goals>
						<phase>integration-test</phase>
					</execution>
				</executions>
			</plugin>
			-->

			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${maven.jboss.as.plugin.version}</version>
			</plugin>

			<plugin>
				<!-- Allow this web application to be started with the command : 'mvn jetty:run-war -Psample -Dserver=jetty9x -Ddatabase=derby -Djetty.port=9090' -->
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${maven.jetty.eclipse.plugin.version}</version>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<webApp>
						<contextPath>/welcome</contextPath>
					</webApp>
					<useTestClasspath>true</useTestClasspath>
					<useTestClasspath>true</useTestClasspath>
					<httpConnector>
						<!--host>localhost</host -->
						<port>${jetty.port}</port>
					</httpConnector>
					<stopPort>${jetty.stop.port}</stopPort>
					<stopKey>STOP</stopKey>
					<stopWait>10</stopWait>
					<!--
			<systemProperties>
				<systemProperty>
					<key>nabla.config</key>
					<value>../../config/dev</value>
				</systemProperty>
				<systemProperty>
					<key>nabla.data</key>
					<value>${data.dir}</value>
				</systemProperty>
			</systemProperties>
			-->
				</configuration>
			</plugin>

			<!-- start app using java -jar target/dependency/jetty-runner.jar target/*.war -port 9090 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.mortbay.jetty</groupId>
									<artifactId>jetty-runner</artifactId>
									<version>${jetty.runner.version}</version>
									<destFileName>jetty-runner.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--
            		<plugin>
            		     <groupId>org.apache.maven.plugins</groupId>
            		     <artifactId>maven-war-plugin</artifactId>
            		     <version>${maven.war.plugin.version}</version>
            		     <configuration>
            		         <packagingExcludes>WEB-INF/lib/javaee-web-api*.jar</packagingExcludes>
            		     </configuration>
            		</plugin>
            		-->

			<!-- Allow this web application to be started with the command : 'mvn
				tomcat7:run' -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${maven.tomcat7.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.nabla.project.servers.sample</groupId>
						<artifactId>jsf-simple</artifactId>
						<version>${project.version}</version>
						<type>war</type>
					</dependency>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.client.artifactId}</artifactId>
						<version>${jdbc.version}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<configuration>
					<!-- http port -->
					<port>${tomcat.port}</port>
					<path>/welcome</path>
					<!--<contextFile>${basedir}/src/main/webapp/META-INF/context.xml</contextFile> -->
					<addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
					<!--
	        <systemProperties>
	            <java.security.auth.login.config>${basedir}/conf/jaas.config</java.security.auth.login.config>
	        </systemProperties>
	        -->
					<url>${deploy.url}</url>
					<username>${cargo.remote.user}</username>
					<password>${cargo.remote.password}</password>
					<addContextWarDependencies>true</addContextWarDependencies>
					<addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
					<!--<configurationDir>${basedir}</configurationDir>-->
					<server>nabla-tomcat</server>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.atlassian.maven.plugins</groupId>
				<artifactId>maven-clover2-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>jmeter</id>
			<activation>
				<property>
					<name>profile.activation</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.lazerycode.jmeter</groupId>
						<artifactId>jmeter-maven-plugin</artifactId>
						<version>${maven.jmeter.plugin.version}</version>
						<executions>
							<execution>
								<id>jmeter-tests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>jmeter</goal>
								</goals>
							</execution>
						</executions>
						<inherited>true</inherited>
					</plugin>
					<!--
					<plugin>
						<groupId>com.lazerycode.jmeter</groupId>
						<artifactId>jmeter-analysis-maven-plugin</artifactId>
						<version>${maven.jmeter.analysis.plugin.version}</version>
						<inherited>true</inherited>
						<executions>
							<execution>
								<id>create-html-report</id>
								<phase>integration-test</phase>
								<goals>
									<goal>analyze</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					-->
					<plugin>
						<groupId>de.codecentric</groupId>
						<artifactId>jmeter-graph-maven-plugin</artifactId>
						<version>${maven.jmeter.graph.plugin.version}</version>
						<executions>
							<execution>
								<id>create-graph-threads</id>
								<phase>integration-test</phase>
								<goals>
									<goal>create-graph</goal>
								</goals>
							</execution>
						</executions>
						<inherited>true</inherited>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>logback</id>
			<dependencies>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
					<scope>runtime</scope>
					<exclusions>
						<exclusion>
							<artifactId>slf4j-api</artifactId>
							<groupId>org.slf4j</groupId>
						</exclusion>
					</exclusions>
				</dependency>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>log4j</id>
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
					<scope>runtime</scope>
					<exclusions>
						<exclusion>
							<artifactId>slf4j-api</artifactId>
							<groupId>org.slf4j</groupId>
						</exclusion>
					</exclusions>
				</dependency>
				<dependency>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
