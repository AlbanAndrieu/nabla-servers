<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<artifactId>sample</artifactId>
		<groupId>com.nabla.project.servers.sample</groupId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.jboss.tools.gwt.kitchensink</groupId>
	<artifactId>gwt-kitchensink</artifactId>
	<packaging>war</packaging>
	<name>JBoss AS Quickstarts: Errai kitchensink</name>
	<description>A starter Java EE 6 webapp project for use on JBoss AS 7 / EAP 6, generated from the jboss-javaee6-webapp archetype</description>

	<properties>
	    <application.id>nabla</application.id>
		<!--<datasource>java:/jdbc/${datasource.name}</datasource>-->
		<database.name>nabla</database.name>

		<!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any
			dependencies from org.jboss.spec will have their version defined by this
			BOM -->
		<!--<org.jboss.spec.jboss.javaee6.version>2.0.0.Final</org.jboss.spec.jboss.javaee6.version> -->
		<!-- Alternatively, comment out the above line, and un-comment the line
			below to use version 3.0.0.Beta1-redhat-1 which is a release certified to
			work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven
			repository. -->
		<!-- <org.jboss.spec.jboss.javaee6.version>3.0.0.Beta1-redhat-1</org.jboss.spec.jboss.javaee6.version> -->
		<!-- <errai.version>2.0.Beta3</errai.version> <gwt.version>2.4.0</gwt.version>
			<maven.gwt.plugin.version>${gwt.version}</maven.gwt.plugin.version> <junit.version>4.10</junit.version> -->
		<hibernate.validator.version>4.2.0.Final</hibernate.validator.version> <!-- TODO check because version is better than main pom -->
		<!-- <validation.api.version>1.0.0.GA</validation.api.version> <hibernate.jpamodelgen.version>1.1.1.Final</hibernate.jpamodelgen.version>
			<maven.war.plugin.version>2.2</maven.war.plugin.version> <maven.clean.plugin.version>2.4.1</maven.clean.plugin.version>
			<maven.compiler.plugin.version>2.5.1</maven.compiler.plugin.version> <maven.surefire.plugin.version>2.12</maven.surefire.plugin.version>
			<maven.jboss.as.plugin.version>7.1.1.Final</maven.jboss.as.plugin.version> -->
		<org.mvel.mvel2.version>2.1.Beta8</org.mvel.mvel2.version> <!-- TODO check because version is better than main pom -->
		<!-- TODO remove -->
		<org.jboss.bom.jboss.javaee6.with.tools.version>1.0.0.M6</org.jboss.bom.jboss.javaee6.with.tools.version>
		<!-- TODO SEE https://docs.jboss.org/author/display/ARQ/Apache+OpenEJB+3.1+-+Embedded -->
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- Arquillian : http://arquillian.org/guides/getting_started_fr -->

			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
				of artifacts. We use this here so that we always get the correct versions
				of artifacts. Here we use the jboss-javaee-6.0-with tools stack (you can
				read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
				for your project, such as Arquillian for testing) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${org.jboss.bom.jboss.javaee6.with.tools.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
				of artifacts. We use this here so that we always get the correct versions
				of artifacts. Here we use the jboss-javaee-6.0 stack (you can read this as
				the JBoss stack of the Java EE 6 APIs). You can actually use this stack with
				any version of JBoss AS that implements Java EE 6, not just JBoss AS 7! -->
			<!-- <dependency> <groupId>org.jboss.spec</groupId> <artifactId>jboss-javaee-6.0</artifactId>
				<version>${org.jboss.spec.jboss.javaee6.version}</version> <type>pom</type>
				<scope>import</scope> </dependency> <dependency> <groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId> <version>${version.org.jboss.arquillian}</version>
				<scope>import</scope> <type>pom</type> </dependency> -->

			<!-- Errai Core and ErraiBus -->
			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-bus</artifactId>
				<version>${errai.version}</version>
				<exclusions>
					<exclusion>
						<groupId>javax.inject</groupId>
						<artifactId>javax.inject</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.annotation</groupId>
						<artifactId>jsr250-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-ioc</artifactId>
				<version>${errai.version}</version>
				<exclusions>
					<exclusion>
						<groupId>javax.inject</groupId>
						<artifactId>javax.inject</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.annotation</groupId>
						<artifactId>jsr250-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-tools</artifactId>
				<version>${errai.version}</version>
			</dependency>

			<!-- Errai JAX-RS -->
			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-jaxrs-client</artifactId>
				<version>${errai.version}</version>
			</dependency>

			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-jaxrs-provider</artifactId>
				<version>${errai.version}</version>
			</dependency>

			<!-- Errai CDI Integration Modules -->
			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-cdi-client</artifactId>
				<version>${errai.version}</version>
			</dependency>

			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-javax-enterprise</artifactId>
				<version>${errai.version}</version>
			</dependency>

			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>errai-weld-integration</artifactId>
				<version>${errai.version}</version>
			</dependency>

			<dependency>
				<groupId>org.jboss.errai</groupId>
				<artifactId>jboss7-support</artifactId>
				<version>${errai.jboss7.support.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.gwt</groupId>
				<artifactId>gwt-user</artifactId>
				<version>${gwt.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.gwt</groupId>
				<artifactId>gwt-dev</artifactId>
				<version>${gwt.version}</version>
				<classifier>${platform}</classifier>
			</dependency>

			<!-- gwt-test-utils is needed by clover -->
			<dependency>
			    <groupId>com.googlecode.gwt-test-utils</groupId>
			    <artifactId>gwt-test-utils</artifactId>
			    <version>${gwt.test.utils.version}</version><!--TODO-->
			    <scope>test</scope>
			</dependency>

			<!-- Test dependencies -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<type>jar</type>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All
			of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.transaction</groupId>
			<artifactId>jboss-transaction-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope
			as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in
			JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Bean Validation API, which is used both on the server and
			the client. -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate.validator.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- GWT validation uses Hibernate Validator, and requires the sources
			at compile time. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate.validator.version}</version>
			<scope>provided</scope>
			<classifier>sources</classifier>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- GWT validation also requires the validation API sources at compile
			time -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>${validation.api.version}</version>
			<classifier>sources</classifier>
		</dependency>

		<!-- The next set of dependencies are for Errai -->
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-bus</artifactId>
			<exclusions>
				<exclusion>
					<groupId>javax.inject</groupId>
					<artifactId>javax.inject</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.annotation</groupId>
					<artifactId>jsr250-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-ioc</artifactId>
			<exclusions>
				<exclusion>
					<groupId>javax.inject</groupId>
					<artifactId>javax.inject</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.annotation</groupId>
					<artifactId>jsr250-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-tools</artifactId>
		</dependency>

		<!-- Errai CDI Integration Modules -->
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-cdi-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-javax-enterprise</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-weld-integration</artifactId>

			<exclusions>
				<!-- errai-cdi-jetty is only required for integration testing -->
				<exclusion>
					<groupId>org.jboss.errai</groupId>
					<artifactId>errai-cdi-jetty</artifactId>
				</exclusion>

				<exclusion>
					<groupId>org.jboss.weld.servlet</groupId>
					<artifactId>weld-servlet</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- gwt-user is required at runtime because we use some of the client/server
			shared APIs such as RegExp, so scope is 'compile' rather than 'provided'. -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwt.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-dev</artifactId>
			<version>${gwt.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>jboss7-support</artifactId>
		</dependency>
		<!-- End of Errai dependencies -->


		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for
			typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${hibernate.jpamodelgen.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>${dom4j.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
    		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<!-- Generate compiled stuff in the folder used for developing mode -->
        <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>${basedir}/src/main/webapp/WEB-INF</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>${basedir}/src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</testResource>
		</testResources>
		<!-- Maven will append the version to the finalName (which is the name
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven.war.plugin.version}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<!-- Maven will append the version to the finalName (which is the name
						given to the generated war, and hence the context root) -->
					<warName>${project.artifactId}</warName>

					<!-- We must exclude GWT client local classes from the deployment, or
						classpath scanners such as Hibernate and Weld get confused when the webapp
						is bootstrapping. -->
					<packagingExcludes>**/javax/**/*.*,**/client/local/**/*.class</packagingExcludes>

					<archive>
						<manifestEntries>
							<Dependencies>org.jboss.as.naming,org.jboss.as.server,org.jboss.msc</Dependencies>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${maven.jboss.as.plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven.clean.plugin.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>.errai</directory>
						</fileset>
						<fileset>
							<directory>.gwt</directory>
						</fileset>
						<fileset>
							<directory>src/main/gwt-unitCache</directory>
						</fileset>
						<fileset>
							<directory>src/main/webapp/KitchenSink</directory>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<plugin>
				<!-- Allow this web application to be started with the command : 'mvn jetty:run-war -Djetty.port=9090' -->
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<configuration>
					<webAppConfig>
						<contextPath>/nabla</contextPath>
					</webAppConfig>
					<useTestClasspath>true</useTestClasspath>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>${jetty.port}</port>
							<maxIdleTime>600000</maxIdleTime>
						</connector>
					</connectors>
					<!--
					<systemProperties>
						<systemProperty>
							<key>nabla.config</key>
							<value>../../../config/dev</value>
						</systemProperty>
						<systemProperty>
							<key>nabla.data</key>
							<value>${data.dir}</value>
						</systemProperty>
					</systemProperties>
					-->
				</configuration>
			</plugin>
					<!-- Allow this web application to be started with the command : 'mvn tomcat7:run' -->
			<plugin>
			    <groupId>org.apache.tomcat.maven</groupId>
			    <artifactId>tomcat7-maven-plugin</artifactId>
			    <configuration>
			    <!-- http port -->
			        <port>${tomcat.port}</port>
			        <path>/nabla</path>
			        <!--<contextFile>${basedir}/src/main/webapp/META-INF/context.xml</contextFile>-->
			        <addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
			        <!--
			        <systemProperties>
			            <java.security.auth.login.config>${basedir}/conf/jaas.config</java.security.auth.login.config>
			        </systemProperties>
			        -->
			        <url>${deploy.url}</url>
			        <username>${cargo.remote.user}</username>
			        <password>${cargo.remote.password}</password>
			        <addContextWarDependencies>true</addContextWarDependencies>
			        <addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
			        <configurationDir>${basedir}</configurationDir>
			    </configuration>
			    <dependencies>
			        <dependency>
						<groupId>org.jboss.tools.gwt.kitchensink</groupId>
						<artifactId>gwt-kitchensink</artifactId>
						<version>${project.version}</version>
						<type>war</type>
			        </dependency>
			        <dependency>
							<groupId>${jdbc.groupId}</groupId>
							<artifactId>${jdbc.client.artifactId}</artifactId>
							<version>${jdbc.version}</version>
			            	<scope>runtime</scope>
			        </dependency>
			    </dependencies>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${lifecycle.mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>build-helper-maven-plugin</artifactId>
										<versionRange>[${maven.build.helper.plugin.version},)</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
										<artifactId>maven-java-formatter-plugin</artifactId>
										<versionRange>[${maven.java.formatter.plugin.version},)</versionRange>
										<goals>
											<goal>format</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>gwt-maven-plugin</artifactId>
										<versionRange>[${maven.gwt.plugin.version},)</versionRange>
										<goals>
											<goal>resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
        	<!-- Default profile. The reason why we use a default profile, instead of adding the gwt-maven-plugin in the
        	top-level <build> tag, is that if we would do so, configuration of gwt-maven-plugin in with.clover.serveronly
        	/ with.clover.everything profiles would not overwrite the default setting (and we have to disable two goals) -->
        	<profile>
        	    <id>default</id>
				<activation>
					<activeByDefault>true</activeByDefault>
				</activation>
        	    <build>
        	        <plugins>
			    <!-- The default profile skips all tests, though you can tune it to run
			    	just unit tests based on a custom pattern -->
			    <!-- Seperate profiles are provided for running all tests, including Arquillian
			    	tests that execute in the specified container -->
			    <plugin>
			    	<groupId>org.apache.maven.plugins</groupId>
			    	<artifactId>maven-surefire-plugin</artifactId>
			    	<version>${maven.surefire.plugin.version}</version>
			    	<configuration>
			    		<skip>true</skip>
			    	</configuration>
			    </plugin>
			    <!-- GWT plugin to compile client-side java code to javascript and to
			    	run GWT development mode -->
			    <plugin>
			    	<groupId>org.codehaus.mojo</groupId>
			    	<artifactId>gwt-maven-plugin</artifactId>
			    	<version>${maven.gwt.plugin.version}</version>
			    	<configuration>
			    		<inplace>true</inplace>
			    		<logLevel>INFO</logLevel>
			    		<extraJvmArgs>-Xmx512m</extraJvmArgs>

			    		<!-- Configure GWT's development mode (formerly known as hosted mode)
			    			to not start the default server (embedded jetty), but to download the HTML
			    			host page from the configured runTarget. -->
			    		<noServer>true</noServer>
			    		<hostedWebapp>${webappDirectory}</hostedWebapp>
			    		<!--<runTarget>http://localhost:8180/gwt-kitchensink/KitchenSink.html</runTarget>-->
			    		<runTarget>KitchenSink.html</runTarget>
			    		<!-- Use htmlunit framework simulating Internet Explorer 7 -->
                	        		<!--
                	        		<mode>htmlunit</mode>
                	        		<htmlunit>IE7</htmlunit>
                	        		-->
			    	</configuration>
			    	<executions>
			    		<execution>
			    			<goals>
			    				<goal>resources</goal>
			    				<goal>compile</goal>
			    				<!--
			    				<goal>test</goal>
                	                		<goal>i18n</goal>
                	                		<goal>generateAsync</goal>
                	                		-->
			    			</goals>
			    		</execution>
			    		<execution>
			    			<id>gwt-clean</id>
			    			<phase>clean</phase>
			    			<goals>
			    				<goal>clean</goal>
			    			</goals>
			    		</execution>
			    	</executions>
			    </plugin>
        	        </plugins>
        	    </build>
        	</profile>

       	<!-- ============================================================================================ -->
        	<!-- Use this profile to enable Clover instrumentation for server-side code only.                 -->
        	<!-- Client and common code will not be instrumented so it can be translated by GWT to JavaScript -->
        	<!-- But thanks to this you can perform full tests or your application in a web browser           -->
        	<!-- ============================================================================================ -->
        	<profile>
        	    <id>with.test</id>
        	    <build>
        	        <plugins>
        	            <!-- GWT Maven Plugin -->
        	            <plugin>
        	                <groupId>org.codehaus.mojo</groupId>
        	                <artifactId>gwt-maven-plugin</artifactId>
        	                <version>${maven.gwt.plugin.version}</version>
        	                <executions>
        	                    <execution>
        	                        <goals>
        	                            <goal>compile</goal>
        	                            <goal>test</goal>
        	                            <!--<goal>i18n</goal>
        	                            <goal>generateAsync</goal>-->
        	                        </goals>
        	                    </execution>
        	                </executions>
        	                <!-- Plugin configuration. There are many available options, see gwt-maven-plugin documentation at codehaus.org -->
        	                <configuration>
        	                    <runTarget>KitchenSink.html</runTarget>
        	                    <hostedWebapp>${webappDirectory}</hostedWebapp>
        	                    <!--<i18nMessagesBundle>com.nabla.client.Messages</i18nMessagesBundle>-->
        	                    <!-- Use htmlunit framework simulating Internet Explorer 7 -->
        	                    <!--
        	                    <mode>htmlunit</mode>
        	                    <htmlunit>IE7</htmlunit>
        	                    <validateOnly>true</validateOnly>
        	                    -->
        	                </configuration>
        	            </plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-plugin</artifactId>
							<version>${maven.surefire.plugin.version}</version>
							<configuration>
								<skip>false</skip>
								<!--
											<environmentVariables>
												<JBOSS_HOME>${project.build.directory}/jboss-as-${server.version}</JBOSS_HOME>
											</environmentVariables>
											<systemProperties>
												<jboss.version>${server.version}</jboss.version>
											</systemProperties>
											-->
							</configuration>
						</plugin>
        	            <plugin>
        	                <groupId>com.atlassian.maven.plugins</groupId>
        	                <artifactId>maven-clover2-plugin</artifactId>
        	                <configuration>
        	                    <skip>true</skip>
        	                </configuration>
        	            </plugin>
        	        </plugins>
        	    </build>
        	</profile>

        	<!-- ============================================================================================ -->
        	<!-- Use this profile to enable Clover instrumentation for server-side code only.                 -->
        	<!-- Client and common code will not be instrumented so it can be translated by GWT to JavaScript -->
        	<!-- But thanks to this you can perform full tests or your application in a web browser           -->
        	<!-- ============================================================================================ -->
        	<profile>
        	    <id>with.clover.serveronly</id>
        	    <build>
        	        <plugins>
        	            <!-- GWT Maven Plugin -->
        	            <plugin>
        	                <groupId>org.codehaus.mojo</groupId>
        	                <artifactId>gwt-maven-plugin</artifactId>
        	                <version>${maven.gwt.plugin.version}</version>
        	                <executions>
        	                    <execution>
        	                        <goals>
        	                            <goal>compile</goal>
        	                            <goal>test</goal>
        	                            <goal>i18n</goal>
        	                            <goal>generateAsync</goal>
        	                        </goals>
        	                    </execution>
        	                </executions>
        	                <!-- Plugin configuration. There are many available options, see gwt-maven-plugin documentation at codehaus.org -->
        	                <configuration>
        	                    <runTarget>KitchenSink.html</runTarget>
        	                    <hostedWebapp>${webappDirectory}</hostedWebapp>
        	                    <!--<i18nMessagesBundle>com.nabla.client.Messages</i18nMessagesBundle>-->
        	                    <!-- Use htmlunit framework simulating Internet Explorer 7 -->
        	                    <!--
        	                    <mode>htmlunit</mode>
        	                    <htmlunit>IE7</htmlunit>
        	                    <validateOnly>true</validateOnly>
        	                    -->
        	                </configuration>
        	            </plugin>
        	            <plugin>
        	                <groupId>com.atlassian.maven.plugins</groupId>
        	                <artifactId>maven-clover2-plugin</artifactId>
        	                <executions>
        	                    <execution>
        	                        <id>clover-initialization</id>
        	                        <phase>initialize</phase>
        	                        <goals>
        	                            <goal>setup</goal>
        	                            <!-- Enable Clover instrumentation -->
        	                        </goals>
        	                    </execution>
        	                    <execution>
        	                        <id>clover-reporting</id>
        	                        <phase>install</phase>
        	                        <goals>
        	                            <goal>aggregate</goal>
        	                            <!-- Aggregate results from sub-modules -->
        	                            <goal>clover</goal>
        	                            <!-- Generate report -->
        	                        </goals>
        	                    </execution>
        	                </executions>
        	                <configuration>
        	                    <!-- List all server-side packages which has to be instrumented -->
        	                    <includes>
        	                        <include>com/nabla/server/**</include>
        	                    </includes>
        	                </configuration>
        	            </plugin>
        	        </plugins>
        	    </build>
        	</profile>

        	<!-- ============================================================================================ -->
        	<!-- Use this profile to enable Clover instrumentation for server, client and common code         -->
        	<!-- Because of fact that everything will be instrumented, client-side and common code cannot     -->
        	<!-- be translated by GWT to JavaScript. Therefore you cannot run tests in a web browser but      -->
        	<!-- you have to use dedicated framework which runs fully in JVM. In this example, the            -->
        	<!-- gwt-test-utils is used for this purpose.                                                     -->
        	<!-- ============================================================================================ -->
        	<profile>
        	    <id>with.clover.everything</id>
        	    <build>
        	        <plugins>
        	            <plugin>
        	                <groupId>org.codehaus.mojo</groupId>
        	                <artifactId>gwt-maven-plugin</artifactId>
        	                <version>${maven.gwt.plugin.version}</version>
        	                <executions>
        	                    <execution>
        	                        <goals>
        	                            <!-- Do not run gwt:compile and gwt:test goals. The reason is that it will start
        	                            conversion of Java client and shared code to JavaScript, searching for sources
        	                            of all referenced classes, including Clover instrumentation, which causes a failure. -->
        	                            <!--<goal>compile</goal>-->
        	                            <!--<goal>test</goal>-->
        	                            <goal>i18n</goal>
        	                            <goal>generateAsync</goal>
        	                        </goals>
        	                    </execution>
        	                </executions>
        	                <!-- Plugin configuration. There are many available options, see gwt-maven-plugin documentation at codehaus.org -->
        	                <configuration>
        	                    <runTarget>KitchenSink.html</runTarget>
        	                    <hostedWebapp>${webappDirectory}</hostedWebapp>
        	                    <!--<i18nMessagesBundle>com.nabla.client.Messages</i18nMessagesBundle>-->
        	                    <!-- Use htmlunit framework simulating Internet Explorer 7 -->
        	                    <!--
        	                    <mode>htmlunit</mode>
        	                    <htmlunit>IE7</htmlunit>
        	                    -->
        	                </configuration>
        	            </plugin>
        	            <plugin>
        	                <groupId>org.apache.maven.plugins</groupId>
        	                <artifactId>maven-surefire-plugin</artifactId>
        	                <configuration>
        	                    <!-- Increase available memory as gwt-test-utils can consume a lot -->
        	                    <argLine>-Xmx512M -XX:MaxPermSize=128M</argLine>
        	                </configuration>
        	            </plugin>
        	            <plugin>
        	                <groupId>com.atlassian.maven.plugins</groupId>
        	                <artifactId>maven-clover2-plugin</artifactId>
        	                <executions>
        	                    <execution>
        	                        <id>clover-initialization</id>
        	                        <phase>initialize</phase>
        	                        <goals>
        	                            <!-- Enable Clover instrumentation -->
        	                            <goal>setup</goal>
        	                        </goals>
        	                    </execution>
        	                    <execution>
        	                        <id>clover-reporting</id>
        	                        <phase>install</phase>
        	                        <goals>
        	                            <!-- Aggregate results from sub-modules and generate report-->
        	                            <goal>aggregate</goal>
        	                            <goal>clover</goal>
        	                        </goals>
        	                    </execution>
        	                </executions>
        	                <configuration>
        	                    <!-- We don't need <includes> section as everything will be instrumented List all server-side packages which has to be instrumented -->
        	                </configuration>
        	            </plugin>
        	        </plugins>
        	    </build>
        	</profile>
	</profiles>

</project>
